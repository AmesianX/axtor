# LLVM 3.0 library


thisModuleDependsOn llvm3

declareModule "llvm-axtor" 0 \
    "LLVM-Axtor Library" "library"

_axtor_init() {
    debug "[__${DEVENV_THIS_MODULE}_init called]"

    if [ "$SYS_NAME" = "windows" ]; then
        devenv_declare_var compiler $DEVENV_MVAR_COMPILER_TYPE MSVC
    else
        devenv_declare_var compiler $DEVENV_MVAR_COMPILER_TYPE GCC
    fi

    devenv_declare_var optimization $DEVENV_MVAR_OPTIMIZATION_TYPE $DEVENV_BUILD_MODE
    devenv_declare_var target_arch $DEVENV_MVAR_TARGET_ARCH_TYPE $DEVENV_TARGET_ARCH
    devenv_declare_var root_dir path "$PROJ_DIR/$DEVENV_THIS_MODULE"
    devenv_declare_var source_dir path "$(devenv_get_var root_dir)"
    devenv_declare_var git_url string "$(getGitRepoURL $DEVENV_THIS_MODULE)"
    devenv_declare_var obj_dir string ""
    devenv_declare_var build_dir string ""
    devenv_declare_var enable_assertions bool 1
    devenv_declare_var enable_bindings "string:enum:none|ocaml" "none"
}

_axtor_activate() {
    debug "[_${DEVENV_THIS_MODULE}_activate called]"

    devenvPrintModuleInfo
}

_axtor_update() {
    debug "[__${DEVENV_THIS_MODULE}_update called ]"

    local project_name="axtor"
    local source_dir="$(devenv_get_var source_dir)"
    local git_url="$(devenv_get_var git_url)"

    if [ "$SYS_NAME" = "windows" ]; then
        if [ -e "$source_dir" ]; then
            updateGitRepo \
                "$project_name" \
                "$source_dir" \
                "$git_url" \
                "$@"
        else
            # When cloning we need special handling of LLVM source code
            # on Windows
            # core.autocrlf need to be deactivated before working directory
            # is checked out
            updateGitRepo \
                "$project_name" \
                "$source_dir" \
                "$git_url" \
                -n \
                "$@"
            local exit_code=$?
            [ $exit_code -ne 0 ] && return $exit_code
            cd "$source_dir"
            git config core.autocrlf false && \
                git checkout master
        fi
    else
        # POSIX
        updateGitRepo \
            "$project_name" \
            "$source_dir" \
            "$git_url" \
            "$@"
    fi

    return 0
}

_axtor_build() {
    # Setup current building environment
    eval "$LOCAL_ENV_GEN_VARS"
    genModuleEnv -only-exec-env $DEVENV_THIS_MODULE local

    local build_dir=$_BUILD_DIR
    local obj_dir=$_OBJ_DIR
    PATH=$_PATH
    LD_LIBRARY_PATH=$_LD_LIBRARY_PATH
    PYTHONPATH=$_PYTHONPATH

    if [ ! -d "$(devenv_get_var source_dir)" ]; then
        devenvError "_${DEVENV_THIS_MODULE}_build: No such directory: '$(devenv_get_var source_dir)', run \"de update $DEVENV_THIS_MODULE\" first"
        return 1
    fi

    mkdir -p "$build_dir" || return 1

    local old_pwd=$PWD

    local clean_target=no install_target=no
    for arg; do
        case "$arg" in
            -c | clean) clean_target=yes;;
            install)    install_target=yes;;
        esac
    done

    local target_arch=""
    local build_type=""

    [ -z $target_arch ] && target_arch="$(devenv_get_var target_arch)"
    [ -z $build_type ] && build_type="$(devenv_get_var optimization)"

    # process build options defined by the devenv_build command
    [ $build_opt_clean -eq 1 ] && clean_target=yes
    [ $build_opt_install -eq 1 ] && install_target=yes

    case "$build_type" in
        debug | dbg | Debug | DEBUG)              build_type=Debug;;
        opt | high | medium | release | Release | RELEASE)  build_type=Release;;
        default)                                  build_type=$DEVENV_BUILD_MODE;;
    esac

    local exit_code=0

    if [ "$SYS_NAME" != "windows" ]; then
        # POSIX, use autoconf
        mkdir -p "$obj_dir" || return 1
        cd "$obj_dir"

        if [ "$clean_target" = yes ]; then
            [ -e config.log ] && rm config.log
        fi

        local configure_opts=
        if [ "$build_type" = "Debug" ]; then
            configure_opts="--disable-optimized --enable-debug-runtime"
        else
            configure_opts="--enable-optimized"
        fi

        local enable_assertions=$(devenv_get_var enable_assertions)
        if isTrue "$enable_assertions"; then
            configure_opts="$configure_opts --enable-assertions"
        fi
        local enable_bindings=$(devenv_get_var enable_bindings)
        configure_opts="$configure_opts --enable-bindings=$enable_bindings"


        local llvmPrefix=`llvm-config --prefix`
        local llvmObjRoot=`llvm-config --obj-root`
        local llvmSrcRoot=`llvm-config --src-root`

        local llvmBin=llvmPrefix "\bin"

        if [ ! -e config.log -o $build_opt_reconfigure -eq 1 ] && \
            [ "$clean_target" = "no" ]; then
            "$(devenv_get_var source_dir)/configure" --prefix="$llvmPrefix" \
                --with-pic --enable-pic --enable-shared \
                --disable-multilib \
                --with-llvm-obj=$llvmObjRoot \
                --with-llvm-src=$llvmSrcRoot
                $configure_opts

           exit_code=$?
           if [ $exit_code -ne 0 ]; then
               cd "$old_pwd"
               return $exit_code
           fi
        fi

        if [ "$clean_target" = "yes" ]; then
            make clean
        else
            devenvMsg "Execute: make \"$@\" -j$build_opt_parallel_jobs"
            make "$@" -j$build_opt_parallel_jobs
        fi
        exit_code=$?

        if [ "$clean_target" = "no" -a \
            "$install_target" = "no" -a \
            $exit_code -eq 0 ]; then
            make install
        fi
    else
        # fix: cmake does not create custom build step for asm if msvc environment is not loaded
        if [ -z "${VSINSTALLDIR}" ]; then
            devenv_save_config
            echo cmd //C run_devenv.bat $target_arch "DEVENV_CONFIG_VARS_SAVED=no run_devenv build ${DEVENV_THIS_MODULE} -- $@"
            cmd //C run_devenv.bat $target_arch "DEVENV_CONFIG_VARS_SAVED=no run_devenv build ${DEVENV_THIS_MODULE} -- $@"
        else
            # fix of cmake behaviour that it exclude one of crucial dependencies for the first time -> does not compile for the first time
            runCMakeBuilder "$@"
            runCMakeBuilder --build "$@"
            exit_code=$?
        fi
    fi

    cd "$old_pwd"
    return $exit_code
}

_axtor_setup_own_env() {
    debug "[_${DEVENV_THIS_MODULE}_setup_own_env called]"

    _BUILD=$(genBuildDir "$compiler" "$build_mode" "$target_arch")
    _BUILD_DIR="$INSTALL_BASE_DIR/$_BUILD/$DEVENV_THIS_MODULE"
    _OBJ_DIR="$INSTALL_BASE_DIR/$_BUILD/${DEVENV_THIS_MODULE}-obj"

    devenv_set_var obj_dir "$_OBJ_DIR"
    devenv_set_var build_dir "$_BUILD_DIR"

    appendPathIfNo _CPPPATH "$_BUILD_DIR/include"
    appendPathIfNo _LIBPATH "$_BUILD_DIR/lib"

    if [ "$SYS_NAME" != "windows" ]; then
        prependPathIfNo _LD_LIBRARY_PATH "$_BUILD_DIR/lib"
    else
        prependPathIfNo _PATH "$_BUILD_DIR/lib"
    fi
    prependPathIfNo _PATH "$_BUILD_DIR/bin"
}

_axtor_make_vcproj() {
    # fix: cmake does not create custom build step for asm if
    # msvc environment is not loaded
    if [ -z "${VSINSTALLDIR}" ]; then
        devenv_save_config
        local target_arch="$(devenv_get_var target_arch)"
        cmd //C run_devenv.bat $target_arch "DEVENV_CONFIG_VARS_SAVED=no run_devenv make_vcproj ${DEVENV_THIS_MODULE} -- $@"
    else
        # fix of cmake behaviour that it exclude one of crucial dependencies for the first time.
        runCMakeBuilder "$@"
        runCMakeBuilder "$@"
        exit_code=$?
    fi
}


# Local variables:
# tab-width: 4
# indent-tabs-mode: nil
# End:
#
# vi: set shiftwidth=4 tabstop=4 expandtab
# :indentSize=4:tabSize=4:noTabs=true:
#
